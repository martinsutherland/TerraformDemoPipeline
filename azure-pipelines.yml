trigger:
  - main

variables:
  - group: Authentication
  - name: dockerRegistryServiceConnection
    value: "70193de8-17c3-4d45-aed9-7b6d459cb210"
  - name: imageRepository
    value: "terraformimage"
  - name: containerRegistry
    value: "terraformcontainer2023.azurecr.io"
  - name: dockerfilePath
    value: "$(Build.SourcesDirectory)/Dockerfile"
  - name: tag
    value: "$(Build.BuildId)"
  - name: appName
    value: "Azure-test-App-Terraform"
  - name: azureSubscription
    value: "Azure subscription 1 (12d4a125-7d4d-45ad-8101-2ba4e5ce1593)"
  - name: vmImageName
    value: "ubuntu-latest"
  - name: uiSource
    value: "/src"

jobs:
  - job: TerraformDeploy
    displayName: 'Terraform Deployment'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: AzureCLI@2
        displayName: AzureCLI
        inputs:
          azureSubscription: $(azureSubscription)
          scriptType: ps
          scriptLocation: inlineScript
          inlineScript: |
            az --version
            az account show

      - script: |
          # Set the Azure subscription for Terraform
          az account set --subscription "$(azureSubscription)"
        displayName: 'Set Azure Subscription'

      - script: |
          # Initialize Terraform
          cd $(Build.SourcesDirectory)/infra
          terraform init
        displayName: 'Initialize Terraform'

      - script: |
          # Create or update the resource group
          cd $(Build.SourcesDirectory)/infra
          terraform apply -auto-approve
        displayName: 'Apply Terraform Configuration'

      - script: |
          # Get the output values from Terraform (if needed)
          cd $(Build.SourcesDirectory)/infra
          terraform output
        displayName: 'Terraform Output'

      - script: |
          # Publish the output values as pipeline variables (if needed)
          echo "##vso[task.setvariable variable=MyVariable;isOutput=true]$(value)"
        displayName: 'Publish Terraform Output'
