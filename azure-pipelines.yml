trigger:
  - main

resources:
  - repo: self

variables:
  - group: Authentication
  - name: dockerRegistryServiceConnection
    value: "70193de8-17c3-4d45-aed9-7b6d459cb210"
  - name: imageRepository
    value: "terraformimage"
  - name: containerRegistry
    value: "terraformcontainer2023.azurecr.io"
  - name: dockerfilePath
    value: "$(Build.SourcesDirectory)/Dockerfile"
  - name: tag
    value: "$(Build.BuildId)"
  - name: appName
    value: "Azure-test-App-Terraform"
  - name: azureSubscription
    value: "Azure subscription 1 (12d4a125-7d4d-45ad-8101-2ba4e5ce1593)"
  - name: vmImageName
    value: "ubuntu-latest"
  - name: uiSource
    value: "/src"


stages:
  - stage: Authentication
    displayName: Azure Auth
    jobs:
      - job: AzureAuth
        displayName: Logging into Azure
        pool:
          vmImage: $(vmImageName)
        steps:
          - script: |
              az login -u $(username) -p $(password)
 

    

  - stage: TerraformProvision
    displayName: Terraform Provisioning stage
    jobs:
      - job: TerraformProvision
        displayName: Provision Infrastructure with Terraform
        pool:
          vmImage: $(vmImageName)
        steps:
          - script: |
              # Install Terraform (if not already installed)
              if ! command -v terraform &> /dev/null; then
                  curl -o terraform.zip https://releases.hashicorp.com/terraform/0.15.0/terraform_0.15.0_linux_amd64.zip
                  unzip terraform.zip
                  chmod +x terraform
                  sudo mv terraform /usr/local/bin/
              fi
            displayName: 'Install Terraform'

          - script: |
              # Initialize Terraform and apply your configuration
              cd $(Build.SourcesDirectory)/infra
              terraform init
              terraform plan
              terraform apply
            displayName: 'Terraform Init and Apply'

  # - stage: Build
  #   displayName: Build stage
  #   jobs:
  #     - job: Build
  #       displayName: Build
  #       pool:
  #         vmImage: $(vmImageName)
  #       steps:
  #         - task: Docker@2
  #           displayName: Push stage
  #           inputs:
  #             command: buildAndPush
  #             repository: $(imageRepository)
  #             dockerfile: $(dockerfilePath)
  #             containerRegistry: $(dockerRegistryServiceConnection)
  #             tags: |
  #               $(tag)

  # - stage: Deploy
  #   displayName: Deploy
  #   jobs:
  #     - job: Deploy
  #       displayName: Deploy
  #       steps:
  #         - task: AzureWebAppContainer@1
  #           displayName: "Deploy stage"
  #           inputs:
  #             azureSubscription: $(azureSubscription)
  #             appName: $(appName)
  #             imageName: $(containerRegistry)/$(imageRepository):$(tag)
