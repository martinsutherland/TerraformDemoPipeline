trigger:
  - main

resources:
  - repo: self

variables:
  dockerRegistryServiceConnection: "70193de8-17c3-4d45-aed9-7b6d459cb210"
  imageRepository: "terraformimage"
  containerRegistry: "terraformcontainer2023.azurecr.io"
  dockerfilePath: "$(Build.SourcesDirectory)/Dockerfile"
  tag: "$(Build.BuildId)"
  appName: "Azure-test-App-Terraform"
  azureSubscription: "Azure subscription 1 (12d4a125-7d4d-45ad-8101-2ba4e5ce1593)"
  vmImageName: "ubuntu-latest"
  uiSource: "/src"
  azureServiceConnection: "AzureResourceManagerServiceConnection"

stages:

  - stage: TerraformProvision
    displayName: Terraform Provisioning stage
    jobs:
      - job: TerraformProvision
        displayName: Provision Infrastructure with Terraform
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: UseAzureServiceConnection@1
            inputs:
              serviceConnection: $(azureServiceConnection)
          - script: |
              # Install Terraform (if not already installed)
              if ! command -v terraform &> /dev/null; then
                  curl -o terraform.zip https://releases.hashicorp.com/terraform/0.15.0/terraform_0.15.0_linux_amd64.zip
                  unzip terraform.zip
                  chmod +x terraform
                  sudo mv terraform /usr/local/bin/
              fi
            displayName: 'Install Terraform'

          - script: |
              # Initialize Terraform and apply your configuration
              cd $(Build.SourcesDirectory)/infra
              terraform init
              terraform apply -auto-approve
            displayName: 'Terraform Init and Apply'

  - stage: Build
    displayName: Build stage
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: Docker@2
            displayName: Push stage
            inputs:
              command: buildAndPush
              repository: $(imageRepository)
              dockerfile: $(dockerfilePath)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(tag)

  - stage: Deploy
    displayName: Deploy
    jobs:
      - job: Deploy
        displayName: Deploy
        steps:
          - task: AzureWebAppContainer@1
            displayName: "Deploy stage"
            inputs:
              azureSubscription: $(azureSubscription)
              appName: $(appName)
              imageName: $(containerRegistry)/$(imageRepository):$(tag)
